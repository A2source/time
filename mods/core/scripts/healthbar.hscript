var playerIcon;
var opponentIcon;

var healthbarBG;
var healthBar;

var scoreText;
var scoreTextTween;

var iconPositionOverride = false;

var curScore = 0;

function start(song)
{
    healthBarBG = new FlxSprite().load(Paths.mods.image(['healthBar']).content);
    healthBarBG.y = FlxG.height * 0.89;
    healthBarBG.x = FlxG.width / 2 - healthBarBG.width / 2;
    healthBarBG.scrollFactor.set();
    healthBarBG.visible = !ClientPrefs.get('hideHud');

    if(ClientPrefs.get('downscroll')) healthBarBG.y = 0.11 * FlxG.height;

    ClientPrefs.set('hpAlpha', 1);

    healthBar = new FlxBar(healthBarBG.x + 4, healthBarBG.y + 4, FlxBarFillDirection.RIGHT_TO_LEFT, Std.int(healthBarBG.width - 8), Std.int(healthBarBG.height - 8),
        null, '', 0, 1);
    healthBar.scrollFactor.set();
    healthBar.visible = !ClientPrefs.get('hideHud');
    healthBar.alpha = ClientPrefs.get('hpAlpha');
    healthBar.value = 0.5;

    scoreText = new FlxText(0, healthBarBG.y + 48, FlxG.width, "", 20);
    scoreText.setFormat(DEFAULT_FONT, 18, 0xFFFFFFFF, 'center', BORDER_OUTLINE, 0xFF000000);
    scoreText.scrollFactor.set();
    scoreText.borderSize = 1.8;
    scoreText.visible = healthBar.visible;
    
    healthBarBG.cameras = [cams.hud];
    healthBar.cameras = [cams.hud];
    scoreText.cameras = [cams.hud];

    add(healthBarBG);
    add(healthBar);
    add(scoreText);

    playerIcon = new HealthIcon(getCurPlayer().name, true);
    opponentIcon = new HealthIcon(getCurOpponent().name, false);

    game.hscriptManager.setAll('playerIcon', playerIcon);
    game.hscriptManager.setAll('opponentIcon', opponentIcon);

    for (icon in [playerIcon, opponentIcon])
    {
        icon.y = healthBar.y - 75;
        icon.visible = healthBar.visible;
        icon.alpha = healthBar.alpha;
        icon.cameras = [cams.hud];

        add(icon);
    }

    onHealthBarReload();
}

function update(dt)
{
    updateHealthBar(dt);

    updateIconPositions();
    updateIconScale(dt);
    updateIconAnimations();

    updateScoreText(dt);
}

function updateHealthBar(dt)
{
    healthBar.value = FlxMath.lerp(health, healthBar.value, 0.5);

    healthBarBG.setPosition(healthBar.x - 4, healthBar.y - 4);
}

function updateScoreText(dt)
{
    if (scoreText == null) return;

    curScore = Std.int(FlxMath.lerp(score, curScore, 1 - (dt * 18 * Conductor.timescale), 0, 1));
        
    scoreText.text = 'Score: ' + formatScore(curScore)
    + ' | Misses: ' + tally.miss
    + ' | Accuracy: ' + FlxMath.roundDecimal(accuracy * 100, 2) + '%';
}

function formatScore(score)
{
    var arr = ('' + score).split('');

    var string = '';

    var i = arr.length;
    for (digit in arr)
    {
        if (i % 3 == 0 && i != arr.length)
            string += ',';

        string += '' + digit;
        
        i--;
    }

    return string;
}

var ICON_OFFSET = 56;
function updateIconPositions()
{
    if (iconPositionOverride) return;

    playerIcon.x = getIconPosition(true);
	opponentIcon.x = getIconPosition(false);
}

function getIconPosition(player)
{
    var icon = player ? playerIcon : opponentIcon;

    var x = healthBar.x;

    var remap = FlxMath.remapToRange(healthBar.percent, 0, 100, 100, 0);

    var iconScale = (150 * icon.scale.x - (player ? 150 : 0)) / 2;
    var offset = iconScale - ICON_OFFSET * 2;

    var combine = remap * healthBar.width - iconScale - offset;
    x += remap;

    return healthBar.x + (healthBar.width * (FlxMath.remapToRange(healthBar.percent, 0, 100, 100, 0) * 0.01)) + (150 * icon.scale.x - (player ? 150 : 300)) / 2 - ICON_OFFSET;
}

function updateIconAnimations()
{
    var oppWin = healthBar.percent < 20;
    var playerWin = healthBar.percent > 80;

    if (playerIcon.animation.frames == 3) 
        playerIcon.animation.curAnim.curFrame = playerWin ? 2 : oppWin ? 1 : 0;
    else
        playerIcon.animation.curAnim.curFrame = oppWin ? 1 : 0;

    if (opponentIcon.animation.frames == 3) 
        opponentIcon.animation.curAnim.curFrame = oppWin ? 2 : playerWin ? 1 : 0;
    else
        opponentIcon.animation.curAnim.curFrame = playerWin ? 1 : 0;
}

function updateIconScale(dt)
{
    for (icon in [playerIcon, opponentIcon])
    {
        var mult = FlxMath.lerp(1, icon.scale.x, 1 - (dt * 9 * Conductor.timescale));
        
        icon.scale.set(mult, mult);
        icon.updateHitbox();

        icon.origin.set(icon.width, icon.height / 2);
    }
}

function onHealthBarReload()
{
    if (healthBar == null) return;

    healthBar.createFilledBar(0xFFFF0000, 0xFF00FF00);
    healthBar.updateBar();
}

function postScoreCalc(note)
{
    if (note != null && !game.cpuControlled)
    {
        if(scoreTextTween != null)
            scoreTextTween.cancel();
        
        scoreText.scale.x = 1.075;
        scoreText.scale.y = 1.075;
        scoreTextTween = FlxTween.tween(scoreText.scale, {x: 1, y: 1}, 0.2, {
            onComplete: function(twn) {
                scoreTextTween = null;
            }
        }, 'score text tween');
    }
}

function getIconString(char)
{
    return '' + (char.iconSuffix != '' ? '-' : '') + char.iconSuffix;
}

function onHitNotePost(note)
{
    if (note.c == game.prevPlay) return;
    if (note.hasTail) return;

    playerIcon.change(getCurPlayer().name, getIconString(getCurPlayer()));
    updateCharCols();
}

function onOpponentHit(note)
{
	if (note.c == game.prevOpp) return;
    if (note.hasTail) return;

    opponentIcon.change(getCurOpponent().name, getIconString(getCurOpponent()));
    updateCharCols();
}

function onBeatHit(beat)
{
    for (icon in [playerIcon, opponentIcon])
    {
        icon.scale.set(1.2, 1.2);
        icon.updateHitbox();
    }
}

// function onEvent(name, v1, v2, v3)
// {
//     if (name != 'Set Icon Suffix') return;

//     var char = char(v1);
//     char.iconSuffix = '-$v2';

//     var icon = '' + (char.iconSuffix != '' ? '-' : '') + char.iconSuffix;

//     if (game.prevPlay == v1) playerIcon.change(getCurPlayer().name, getIconString(getCurPlayer()), icon);
//     if (game.prevOpp == v1) opponentIcon.change(getCurPlayer().name, getIconString(getCurPlayer()), icon);
// }