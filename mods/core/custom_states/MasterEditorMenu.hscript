var buttons = [
    {
        name: 'Options',
        state: 'OptionsState'
    },
    { 
        name: 'Chart Editor',
        state: 'ChartEditorState'
    },
    { 
        name: 'Character Editor',
        state: 'CharacterEditorState'
    },
    { 
        name: 'Stage Editor',
        state: 'StageEditorState'
    },
    { 
        name: 'Strumskin Editor',
        state: 'StrumSkinEditorState'
    },
    {
        name: 'Video Test State',
        state: 'VideoTestState'
    },
    {
        name: 'Convert Test',
        state: 'ChartConvertState'
    }
];

var uiButtons = [];

var diff = [
    'easy',
    'normal',
    'hard'
];

var quickLoadPanel = Screen.addComponent(UiS.buildXml(['master-editor-menu', 'songs']));
var diffPanel = Screen.addComponent(UiS.buildXml(['master-editor-menu', 'difficulties']));

var initialized = false;
function create()
{
    DiscordClient.changePresence({state: ''});

    var quickLoadPos = ClientPrefs.register('masterQuickLoadPos', {x: FlxG.width * 0.35, y: FlxG.height * 0.1});
    var masterDiffPos = ClientPrefs.register('masterDiffPos', {x: FlxG.width * 0.525, y: FlxG.height * 0.1});

    if (FlxG.sound.music != null)
	    FlxG.sound.music.stop();

    FlxG.mouse.visible = true;

    var view = new HBox();
    var formatBox = new VBox();

    UiS.addSpacer(75, 0, view);
    view.addComponent(formatBox);
    UiS.addSpacer(0, 75, formatBox);

    var buttonsBox = new HBox();

    var boxes = [];
    var boxIndex = -1;

    for (i in 0...buttons.length)
    {
        if (i % 5 == 0)
        {
            boxes.push(new VBox());
            boxIndex++;
        }

        var curButtonCol = boxes[boxIndex];

        var data = buttons[i];
        var button = getButton(data.name);
        button.onClick = (e) -> { LoadingState.switchCustomState(data.state); }

        curButtonCol.addComponent(button);
        UiS.addSpacer(0, 25, curButtonCol);

        uiButtons.push(button);
    }

    for (box in boxes)
        buttonsBox.addComponent(box);

    formatBox.addComponent(buttonsBox);

    UiS.addSpacer(0, 25, formatBox);
    UiS.addLabel('Set Working Mod Directory', formatBox);

    var mod = UiS.getModsDropdown(()-> 
    { 
        if (!initialized)
        {
            initialized = true;
            return;
        }

        LoadingState.switchCustomState('MasterEditorMenu');
    });
    formatBox.addComponent(mod);

    UiS.addSpacer(125, 0, view);

    var listView = UiS.get('songs', quickLoadPanel);
    listView.dataSource = getDataSource();

    var diffSelect = UiS.get('diff', diffPanel);

    var path = Paths.folder('songs', WORKING_MOD_DIRECTORY);

    if (path == null)
    {
        listView.disabled = true;
        diffSelect.disabled = true;

        listView.dataSource.add({text: 'Songs folder not found in mod directory "' + WORKING_MOD_DIRECTORY + '"'});

        uiButtons[1].disabled = true;
    }
    else
        for (song in FileSystem.readDirectory(path))
            listView.dataSource.add({text: song});

    listView.onChange = (e)->
    {
        if (listView.selectedItem == null)
            return;

        if (diffSelect.selectedItem == null)
        {
            alert('Select difficulty first', ALERT_TITLE);
            return;
        }

        var game = new PlayState(listView.selectedItem.text, diffSelect.selectedItem.text, WORKING_MOD_DIRECTORY);
        LoadingState.switchState(game);
    }
    quickLoadPanel.addComponent(listView);

    diffSelect.dataSource = getDataSource();
    for (thing in diff)
        diffSelect.dataSource.add({text: thing});

    diffPanel.addComponent(diffSelect);

    UiS.addSpacer(25, 0, view);

    Screen.addComponent(view);

    UiS.registerDraggable(quickLoadPanel);
    UiS.registerDraggable(diffPanel);

    quickLoadPanel.x = quickLoadPos.x;
    quickLoadPanel.y = quickLoadPos.y;

    diffPanel.x = masterDiffPos.x;
    diffPanel.y = masterDiffPos.y;
}

function update(dt)
{
    if (FlxG.keys.justPressed.H)
    {
        var game = new PlayState(['Dad Battle', 'Execution'], 'normal', WORKING_MOD_DIRECTORY);
        LoadingState.switchState(game);
    }
}

function getButton(text)
{
    var button = new Button();
    button.text = text;
    button.width = 90;
    button.height = 60;

    return button;
}

function onLeaveState()
{
    if (quickLoadPanel == null) return;

    ClientPrefs.set('masterQuickLoadPos', {x: quickLoadPanel.screenLeft, y: quickLoadPanel.screenTop});
    ClientPrefs.set('masterDiffPos', {x: diffPanel.screenLeft, y: diffPanel.screenTop});

    ClientPrefs.save();
}