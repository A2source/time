var versions = [
    'Psych 0.6.3 & 0.7.3'
];

var jsonFileName = '';
var jsonFileContent = '';
var eventFileContent = '';

var convertingFrom = '';

var jsonExtInfo = [{label: 'JSON File', extension: 'json'}];

function create()
{
    FlxG.mouse.visible = true;

    box = new HBox();
    push = new VBox();

    view = new ScrollView();
    view.height = FlxG.height - 200;

    UiS.addSpacer(25, 0, box);
    UiS.addSpacer(0, 50, push);

    box.addComponent(push);
    push.addComponent(view);

    UiS.addHeader('Convert Chart', view);

    var openedChartLabel = new Label();
    openedChartLabel.text = 'No chart opened';

    var openedEventLabel = new Label();
    openedEventLabel.text = 'No events opened';

    var buttonsBox = new HBox();

    var openChartButton = new Button();
    openChartButton.height = 75;
    openChartButton.width = 75;
    openChartButton.text = 'Open Chart File';

    var openEventsButton = new Button();
    openEventsButton.height = 75;
    openEventsButton.width = 100;
    openEventsButton.text = 'Open Events File (Optional)';

    buttonsBox.addComponent(openChartButton);
    buttonsBox.addComponent(openEventsButton);
    view.addComponent(buttonsBox);

    view.addComponent(openedChartLabel);
    view.addComponent(openedEventLabel);

    UiS.addHR(7, view);

    var source = getDataSource();
    for (v in versions)
        source.add({text: v});

    UiS.addLabel('Choose chart version', view);

    var versionDropDown = new haxe.ui.components.DropDown();
    versionDropDown.dataSource = source;
    versionDropDown.searchable = true;
    versionDropDown.searchPrompt = 'Choose version...';
    versionDropDown.width = 150;
    versionDropDown.onChange = (e) ->
    {
        if (versionDropDown.selectedItem == null)
            return;

        convertingFrom = versionDropDown.selectedItem.text;
    }
    view.addComponent(versionDropDown);

    convertingFrom = versions[0];

    UiS.addHR(7, view);

    var convertButton = new Button();
    convertButton.height = 75;
    convertButton.width = 75;
    convertButton.text = 'Convert!';
    convertButton.disabled = true;
    convertButton.onClick = ()->
    {
        var dif = getDifficultyFromName(jsonFileName);
        trace(convertingFrom, dif);

        switch(convertingFrom)
        {
            case 'Psych 0.6.3 & 0.7.3':
                convertFromPsych063073(jsonFileContent, eventFileContent, dif);
        }
    }
    view.addComponent(convertButton);

    openChartButton.onClick = ()->
    {
        Dialogs.openFile(function(button, files)
        {
            if (files == null || files == [])
                return;

            var file = files[0];

            jsonFileName = file.name;
            jsonFileContent = File.getContent(file.fullPath);
            openedChartLabel.text = 'Opened chart "' + file.name + '"';

            convertButton.disabled = false;
        }, {multiple: false, extensions: jsonExtInfo});
    }

    openEventsButton.onClick = ()->
    {
        Dialogs.openFile(function(button, files)
        {
            if (files == null || files == [])
                return;

            var file = files[0];

            eventFileContent = File.getContent(file.fullPath);
            openedEventLabel.text = 'Opened events "' + file.name + '"';
        }, {multiple: false, extensions: jsonExtInfo});
    }

    UiS.addHR(7, view);

    UiS.addLabel('Working Mod Directory: "' + WORKING_MOD_DIRECTORY + '"', view);

    Screen.addComponent(box);
}

function getDifficultyFromName(name)
{
    StringTools.endsWith(name, '-hard') ? 'hard' : StringTools.endsWith(name, '-easy') ? 'easy' : 'normal';
}

function convertFromPsych063073(rawJson, rawEvents, dif)
{
    var parsedSong = parseJson(rawJson);

    var chart = parsedSong.song;

    var formattedSong = 
    {
        version: CHART_VERSION_STRING,

        song: '',
        stage: '',

        metadata: null,

        sections: [],
        notes: [],

        events: [],

        bpm: 0,
        speed: 0,

        needsVoices: false,

        players: [],
        opponents: [],
        autoGF: '',

        validScore: true
    }

    formattedSong.players.push(chart.player1);
    formattedSong.opponents.push(chart.player2);

    var chars = [chart.player1, chart.player2];

    formattedSong.song = chart.song;
    formattedSong.stage = chart.stage;

    var dummyMetadata =
    {
        musicians: [],
        voiceActors: [],
        charters: [],
        programmers: [],
        additionalArtists: [],
        additionalAnimators: []
    }
    formattedSong.metadata = dummyMetadata;

    trace('setup metadata.');

    // - SECTIONS
    var formattedSections = [];
    var parsedSections = chart.notes;
    for (sec in parsedSections)
    {
        var curSection =
        {
            sectionBeats: sec.sectionBeats,

            bpm: sec.bpm,
            changeBPM: sec.changeBPM,

            charFocus: sec.mustHitSection ? 0 : 1
        }

        formattedSections.push(curSection);
    }

    formattedSong.sections = formattedSections;
    // - SECTIONS

    trace('setup sections.');

    // - NOTES
    var formattedNotes = ['easy' => [chart.player1 => [], chart.player2 => []], 
                          'normal' => [chart.player1 => [], chart.player2 => []], 
                          'hard' => [chart.player1 => [], chart.player2 => []]];

    var diffToSet = StringTools.replace(dif, '-', '');

    for (sec in parsedSections)
    {
        var parsedNotes = sec.sectionNotes;

        for (note in parsedNotes)
        {
            var char = sec.mustHitSection ? (note[1] >= 4 ? chars[1] : chars[0]) : (note[1] >= 4 ? chars[0] : chars[1]);

            var curNote =
            {
                d: Std.int(note[1] % 4),
                ms: Math.ceil(note[0]),
                l: note[2],
                t: note[3] != null ? note[3] : ''
            }

            formattedNotes[diffToSet][char].push(curNote);
        }
    }

    formattedSong.notes = formattedNotes;
    // - NOTES

    trace('setup notes.');

    // - EVENTS
    var formattedEvents = [];
    var parsedEvents = chart.events;
    if (chart.events.length == 0)
    {
        if (rawEvents != '')
        {
            var dummy = parseJson(rawEvents);
            parsedEvents = dummy.events;
        }
    }

    for (event in parsedEvents)
    {
        var subEvents = event[1];
        for (subEvent in subEvents)
        {
            var curEvent =
            {
                strumTime: Math.ceil(event[0]),

                event: subEvent[0],

                value1: subEvent[1] != null ? subEvent[1] : '',
                value2: subEvent[2] != null ? subEvent[2] : '',
                value3: subEvent[3] != null ? subEvent[3] : ''
            }

            formattedEvents.push(curEvent);
        }
    }

    formattedSong.events = formattedEvents;
    // - EVENTS

    trace('setup events.');

    formattedSong.bpm = chart.bpm;
    formattedSong.speed = chart.speed;

    formattedSong.needsVoices = chart.needsVoices;

    formattedSong.autoGF = chart.gfVersion;

    Dialogs.saveTextFile('Save Converted Chart', jsonExtInfo, {name: formattedSong.song + '.json', text: stringifyJson(formattedSong, '\t')}, function(result, path)
    {
        trace(result, path);
    });
}

function update(dt)
{
    if (controls.BACK && !this.blockInput) LoadingState.loadAndSwitchCustomState('MasterEditorMenu');
}