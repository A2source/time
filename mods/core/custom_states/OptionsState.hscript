var options = Screen.addComponent(UiS.buildXml(['options']));
var prefs = UiS.get('prefs', options); 

var keys = Screen.addComponent(UiS.buildXml(['controls']));
var controls = UiS.get('controls', keys);

var names = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
            'COMMA', 'PERIOD', 'SEMICOLON', 'COLON',
            'NUMPADZERO', 'NUMPADONE', 'NUMPADTWO', 'NUMPADTHREE', 'NUMPADFOUR', 'NUMPADFIVE', 'NUMPADSIX', 'NUMPADSEVEN', 'NUMPADEIGHT', 'NUMPADNINE',
            'ZERO', 'ONE', 'TWO', 'THREE', 'FOUR', 'FIVE', 'SIX', 'SEVEN', 'EIGHT', 'NINE',
            'UP', 'DOWN', 'LEFT', 'RIGHT',
            'PLUS', 'MINUS', 'NUMPADPLUS', 'NUMPADMINUS',
            'ENTER', 'ESCAPE', 'BACKSPACE', 'SPACE'];

function create()
{
    DiscordClient.changePresence({state: 'Options Menu'});

    var i = 0;
    for (pref in Reflect.fields(FlxG.save.data))
    {
        if (pref == 'timeCEBackup' || pref == 'autosave') continue;

        var value = Reflect.getProperty(FlxG.save.data, pref);
        prefs.addComponent(getPropertyUI(value, pref));
    }

    for (key in ClientPrefs.keyBinds.keys())
    {
        var bind = getPropertyUI(ClientPrefs.keyBinds.get(key), key);

        var props = UiS.gets('property', bind);
        for (i in 0...props.length)
        {
            var prop = props[i];
            var code = prop.value;
            prop.type = 'list';
            prop.dataSource = getKeyDataSource();

            FlxTimer.wait(0.1, () ->
            {
                prop.value = keyToString(code);

                privateAccess(() ->
                {
                    var drop = prop._compositeBuilder.editor.dropDown;
                    drop.searchable = true;
                    drop.searchPrompt = 'Search...';
                });

                var index = i;
                prop.onChange = (e) ->
                {
                    ClientPrefs.keyBinds.get(key)[index] = keyFromString(prop.value);
                    ClientPrefs.saveClientPrefs();
                }
            });
        }

        controls.addComponent(bind);
    }
}

function getKeyDataSource()
{
    var source = getDataSource();
    for (key in names) source.add({text: key});

    return source;
}

function getPropertyUI(value, pref)
{
    var property = new Property();
    property.value = value;
    property.label = pref;
    property.onChange = (e) ->
    {
        ClientPrefs.set(pref, property.value);
        ClientPrefs.save();
    }

    switch(Type.typeof(value))
    {
        case TInt: 
            property.type = 'number';
            property.step = '1';
            property.precision = '0';

        case TFloat: 
            property.type = 'number';
            property.step = '0.01';
            property.precision = '2';

        case TBool: property.type = 'boolean';

        case TObject:
            property = new PropertyGroup();
            property.text = pref;

            for (field in Reflect.fields(value))
            {
                var prop = getPropertyUI(Reflect.getProperty(value, field), field);
                prop.onChange = (e) ->
                {
                    var copy = ClientPrefs.get(pref);

                    ClientPrefs.set(field, copy);
                    ClientPrefs.save();
                }

                property.addComponent(prop);
            }

        case TClass(Array):
            property = new PropertyGroup();
            property.text = pref;

            var i = 0;
            for (field in value)
            {
                var prop = getPropertyUI(field, i);
                prop.onChange = (e) ->
                {
                    var arr = [];

                    var j = 0;
                    for (field in value)
                    {
                        if (j == i) arr.push(prop.value);
                        else arr.push(field);

                        j++;
                    }

                    ClientPrefs.set(pref, arr);
                    ClientPrefs.save();
                }

                property.addComponent(prop);

                i++;
            }

        case TClass(StringMap):
            property = new PropertyGroup();
            property.text = pref;

            for (field in value.keys())
            {
                var prop = getPropertyUI(value.get(field), field);
                prop.onChange = (e) ->
                {
                    ClientPrefs.get(pref).set(field, prop.value);
                    ClientPrefs.save();
                }

                property.addComponent(prop);
            }
    }

    return property;
}

function update(dt)
{
    if (this.blockInput) return;
    if (this.controls.BACK) LoadingState.switchCustomState('MasterEditorMenu');
}